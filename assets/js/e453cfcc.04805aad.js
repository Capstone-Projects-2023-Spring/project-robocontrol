"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[7538],{3905:(e,t,n)=>{n.d(t,{Zo:()=>i,kt:()=>d});var l=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,l,a=function(e,t){if(null==e)return{};var n,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=l.createContext({}),p=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},i=function(e){var t=p(e.components);return l.createElement(s.Provider,{value:t},e.children)},k="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},c=l.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,i=u(e,["components","mdxType","originalType","parentName"]),k=p(n),c=a,d=k["".concat(s,".").concat(c)]||k[c]||m[c]||o;return n?l.createElement(d,r(r({ref:t},i),{},{components:n})):l.createElement(d,r({ref:t},i))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=c;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u[k]="string"==typeof e?e:a,r[1]=u;for(var p=2;p<o;p++)r[p]=n[p];return l.createElement.apply(null,r)}return l.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8917:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>k,frontMatter:()=>o,metadata:()=>u,toc:()=>p});var l=n(7462),a=(n(7294),n(3905));const o={sidebar_position:1,description:"What should be in this section."},r="Class Documentation",u={unversionedId:"api-specification/class-documentation",id:"api-specification/class-documentation",title:"Class Documentation",description:"What should be in this section.",source:"@site/docs/api-specification/class-documentation.md",sourceDirName:"api-specification",slug:"/api-specification/class-documentation",permalink:"/project-robocontrol/docs/api-specification/class-documentation",draft:!1,editUrl:"https://github.com/Capstone-Projects-2023-Spring/project-robocontrol/edit/main/documentation/docs/api-specification/class-documentation.md",tags:[],version:"current",lastUpdatedBy:"Kevin W Jang",sidebarPosition:1,frontMatter:{sidebar_position:1,description:"What should be in this section."},sidebar:"docsSidebar",previous:{title:"API Specification",permalink:"/project-robocontrol/docs/category/api-specification"},next:{title:"Test Procedures",permalink:"/project-robocontrol/docs/category/test-procedures"}},s={},p=[{value:"1. Website",id:"1-website",level:2},{value:"Home Page",id:"home-page",level:2},{value:"<strong>Home.tsx</strong>",id:"hometsx",level:3},{value:"<strong>Banner.tsx</strong>",id:"bannertsx",level:3},{value:"Control Tab",id:"control-tab",level:2},{value:"<strong>Control.tsx</strong>",id:"controltsx",level:3},{value:"<strong>ButtonGrid.tsx</strong>",id:"buttongridtsx",level:3},{value:"About Tab",id:"about-tab",level:2},{value:"<strong>About.tsx</strong>",id:"abouttsx",level:3},{value:"Login",id:"login",level:2},{value:"<strong>Login.tsx</strong>",id:"logintsx",level:3},{value:"<strong>Signup.tsx</strong>",id:"signuptsx",level:3},{value:"2. Robot",id:"2-robot",level:2},{value:"main.py",id:"mainpy",level:2},{value:"move.py",id:"movepy",level:2},{value:"robot_commands_ws.py",id:"robot_commands_wspy",level:2},{value:"robot_video_ws.py",id:"robot_video_wspy",level:2},{value:"3. OpenCV",id:"3-opencv",level:2},{value:"Startup",id:"startup",level:2},{value:"<strong>opencv.py</strong>",id:"opencvpy",level:3},{value:"<strong>opencv_video.py</strong>",id:"opencv_videopy",level:3},{value:"<strong>opencv_commands.py</strong>",id:"opencv_commandspy",level:3},{value:"<strong>color_tuning.p</strong>",id:"color_tuningp",level:3},{value:"<strong>autonomy.py</strong>",id:"autonomypy",level:3},{value:"<strong>automation.py</strong>",id:"automationpy",level:3},{value:"Image Processing",id:"image-processing",level:2},{value:"<strong>color_detection.py</strong>",id:"color_detectionpy",level:3},{value:"<strong>detect_painters_tape.py</strong>",id:"detect_painters_tapepy",level:3},{value:"<strong>detect_painters_tape.py</strong>",id:"detect_painters_tapepy-1",level:3},{value:"<strong>process_images.py</strong>",id:"process_imagespy",level:3}],i={toc:p};function k(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,l.Z)({},i,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"class-documentation"},"Class Documentation"),(0,a.kt)("h2",{id:"1-website"},"1. Website"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"home-page"},"Home Page"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"hometsx"},(0,a.kt)("strong",{parentName:"h3"},"Home.tsx")),(0,a.kt)("p",null,'Component that renders the home page, including navigation buttons for the "Control" and "About" sections.'),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleClick\n")),(0,a.kt)("p",null,"Navigates to the specified path and scrolls to the top of the page."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"path: A string representing the path to navigate to.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Home Component\n")),(0,a.kt)("p",null,"Renders the Home component, which consists of the home page content and navigation buttons."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A React.ReactElement representing the Home component.")),(0,a.kt)("h3",{id:"bannertsx"},(0,a.kt)("strong",{parentName:"h3"},"Banner.tsx")),(0,a.kt)("p",null,"A class component that renders a banner with a hamburger menu for navigation."),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleClose\n")),(0,a.kt)("p",null,"Sets the state's ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," property to false, closing the Offcanvas menu."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleShow\n")),(0,a.kt)("p",null,"Sets the state's ",(0,a.kt)("inlineCode",{parentName:"p"},"show")," property to true, opening the Offcanvas menu."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleLink\n")),(0,a.kt)("p",null,"Closes the Offcanvas menu and scrolls to the top of the page."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"render\n")),(0,a.kt)("p",null,"Renders the Banner component, which includes a Hamburger button and the Offcanvas navigation menu."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A React.ReactElement representing the Banner component.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"control-tab"},"Control Tab"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"controltsx"},(0,a.kt)("strong",{parentName:"h3"},"Control.tsx")),(0,a.kt)("p",null,"Component that renders the control interface for the robot. This interface includes a live video stream from the robot's camera, as well as the button grid for controlling the robot's movements, arm and claw"),(0,a.kt)("p",null,"State:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"loggedIn: A boolean indicating whether the user is logged in."),(0,a.kt)("li",{parentName:"ul"},"key: An object representing the pressed key and its state, containing the char (character) and keyDown (whether the key is currently pressed) properties.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleKeyDown\n")),(0,a.kt)("p",null,"An event handler for the keydown event. Sets the key state with the pressed character and updates the keyDown state to true."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"event: A KeyboardEvent object representing the keydown event.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleKeyUp\n")),(0,a.kt)("p",null,"An event handler for the keyup event. Sets the key state with the pressed character and updates the keyDown state to false."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"event: A KeyboardEvent object representing the keyup event.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Control Component\n")),(0,a.kt)("p",null,"Renders the Control component, which includes the video stream from the robot's camera, the color detection stream, and the ButtonGrid component for controlling the robot. Also, handles keyboard input for robot control."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A React.ReactElement representing the Control component.  ")),(0,a.kt)("h3",{id:"buttongridtsx"},(0,a.kt)("strong",{parentName:"h3"},"ButtonGrid.tsx")),(0,a.kt)("p",null,"Component that renders a grid of buttons for controlling the robot's movements."),(0,a.kt)("p",null,"Props:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"keyPress: An object representing the pressed key and its state, containing the char (character) and keyDown (whether the key is currently pressed) properties."),(0,a.kt)("li",{parentName:"ul"},"commands_ws: A WebSocket object for sending robot commands.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleButtonClick\n")),(0,a.kt)("p",null,"Sends the button's command via the commands WebSocket when a button is clicked."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"command: A string representing the command to be sent.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleButtonMouseDown\n")),(0,a.kt)("p",null,"Sends the button's command via the commands WebSocket when a button is pressed down."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"command: A string representing the command to be sent.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleButtonMouseUp\n")),(0,a.kt)("p",null,"Sends the 'stop' command via the commands WebSocket when a button is released."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"ButtonGrid Component\n")),(0,a.kt)("p",null,"Renders the ButtonGrid component, which consists of a grid of buttons for controlling the robot."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A React.ReactElement representing the ButtonGrid component.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"about-tab"},"About Tab"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"abouttsx"},(0,a.kt)("strong",{parentName:"h3"},"About.tsx")),(0,a.kt)("p",null,"A functional component that displays the content of an About page using ReactMarkdown."),(0,a.kt)("p",null,"Props:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"State:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"markdownText: A string that stores the content of the About.md file.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"useEffect\n")),(0,a.kt)("p",null,"A React Hook that fetches the content of the About.md file and sets the markdownText state with the fetched content."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"render\n")),(0,a.kt)("p",null,"Renders the About component, which includes an AboutContainer that contains the AboutTextContainer, which displays the content of the About.md file using ReactMarkdown."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A React.ReactElement representing the About component.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"login"},"Login"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"logintsx"},(0,a.kt)("strong",{parentName:"h3"},"Login.tsx")),(0,a.kt)("p",null,"Component that renders a login form for the user to input their username and password to access controls."),(0,a.kt)("p",null,"Props:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"loginSuccessful"),": A function that will be called when the login is successful.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleLogin\n")),(0,a.kt)("p",null,"Handles the login process. Makes a POST request to the authentication endpoint and, if successful, triggers the ",(0,a.kt)("inlineCode",{parentName:"p"},"loginSuccessful")," prop function."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleEnterKeyPress\n")),(0,a.kt)("p",null,"Handles the keypress event. If the 'Enter' key is pressed, it triggers the ",(0,a.kt)("inlineCode",{parentName:"p"},"handleLogin")," function."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"event"),": A React.KeyboardEvent representing the key event.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"render\n")),(0,a.kt)("p",null,"Renders the Login component, which includes input fields for the username and password, and a login button."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A React.ReactElement representing the Login component.")),(0,a.kt)("h3",{id:"signuptsx"},(0,a.kt)("strong",{parentName:"h3"},"Signup.tsx")),(0,a.kt)("p",null,"Component that renders a signup form for the user to input their username, password, email, and phone number."),(0,a.kt)("p",null,"Props:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"handleSignup\n")),(0,a.kt)("p",null,"Handles the signup process. Validates the user input, hashes the password, and sends a POST request to the server to create a new user."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"render\n")),(0,a.kt)("p",null,"Renders the Signup component, which includes input fields for the username, password, email, and phone number, and a signup button."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A React.ReactElement representing the Signup component.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"2-robot"},"2. Robot"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"mainpy"},"main.py"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to establish connections for robot command and video streaming."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"asyncio"),(0,a.kt)("li",{parentName:"ul"},"threading"),(0,a.kt)("li",{parentName:"ul"},"RobotCommandWS (from robot_commands_ws)"),(0,a.kt)("li",{parentName:"ul"},"RobotVideoWS (from robot_video_ws)")),(0,a.kt)("p",null,"Main Execution:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Create instances of RobotCommandWS and RobotVideoWS."),(0,a.kt)("li",{parentName:"ol"},"Start separate threads for each connection:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"commands_thread: Runs the asynchronous connection of RobotCommandWS instance."),(0,a.kt)("li",{parentName:"ul"},"video_thread: Runs the video streaming connection of RobotVideoWS instance."))),(0,a.kt)("li",{parentName:"ol"},"Wait for both threads to complete using join() method.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"movepy"},"move.py"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to control the motors and servos for a robot."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"time"),(0,a.kt)("li",{parentName:"ul"},"RPi.GPIO as GPIO"),(0,a.kt)("li",{parentName:"ul"},"RPIservo")),(0,a.kt)("p",null,"Global Variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Motor_A_EN, Motor_B_EN"),": Enable pins for Motor A and B."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Motor_A_Pin1, Motor_A_Pin2, Motor_B_Pin1, Motor_B_Pin2"),": Control pins for Motor A and B."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Dir_forward, Dir_backward, left_forward, left_backward, right_forward, right_backward"),": Direction variables."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"pwn_A, pwm_B"),": PWM variables for Motor A and B."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"claw_servo, arm_servo, elbow_servo, camera_servo"),": Servo control objects.")),(0,a.kt)("p",null,"Functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"motorStop\n")),(0,a.kt)("p",null,"Stops the motors."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"setup\n")),(0,a.kt)("p",null,"Initializes the motors."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"motor_left\n")),(0,a.kt)("p",null,"Controls Motor 2 for positive and negative rotation."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"status: Motor status (0: stop, 1: run)."),(0,a.kt)("li",{parentName:"ul"},"direction: Motor direction (Dir_forward or Dir_backward)."),(0,a.kt)("li",{parentName:"ul"},"speed: Speed of the motor.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"motor_right\n")),(0,a.kt)("p",null,"Controls Motor 1 for positive and negative rotation."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"status: Motor status (0: stop, 1: run)."),(0,a.kt)("li",{parentName:"ul"},"direction: Motor direction (Dir_forward or Dir_backward)."),(0,a.kt)("li",{parentName:"ul"},"speed: Speed of the motor.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"move\n")),(0,a.kt)("p",null,"Controls the movement and turns of the robot."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"speed: Speed of the robot."),(0,a.kt)("li",{parentName:"ul"},"direction: Robot direction ('forward', 'backward', or 'no')."),(0,a.kt)("li",{parentName:"ul"},"turn: Robot turn direction ('left', 'right', or 'no')."),(0,a.kt)("li",{parentName:"ul"},"radius (optional): Turning radius (0 < radius <= 1, default: 0.6).")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"arm_claw_control\n")),(0,a.kt)("p",null,"Controls the servos for the robot's arm and claw."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"claw_command: Claw control command ('open', 'close', or 'no')."),(0,a.kt)("li",{parentName:"ul"},"shoulder_command: Shoulder control command ('up', 'down', or 'no')."),(0,a.kt)("li",{parentName:"ul"},"elbow_command: Elbow control command ('up', 'down', or 'no')."),(0,a.kt)("li",{parentName:"ul"},"camera_command: Camera control command ('up', 'down', or 'no').")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"destroy\n")),(0,a.kt)("p",null,"Stops the motors and releases the resources."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"robot_commands_wspy"},"robot_commands_ws.py"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to manage the WebSocket connection for robot commands."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"websockets"),(0,a.kt)("li",{parentName:"ul"},"functions"),(0,a.kt)("li",{parentName:"ul"},"move"),(0,a.kt)("li",{parentName:"ul"},"json"),(0,a.kt)("li",{parentName:"ul"},"asyncio"),(0,a.kt)("li",{parentName:"ul"},"arm_claw_control (from move)")),(0,a.kt)("p",null,"Class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"RobotCommandWS\n")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PORT: WebSocket port number."),(0,a.kt)("li",{parentName:"ul"},"HOST: WebSocket server IP address."),(0,a.kt)("li",{parentName:"ul"},"HOST_PATH: WebSocket server URL.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"__init__(self) -> None:\n")),(0,a.kt)("p",null,"Initializes RobotCommandWS instance with necessary attributes."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"async connect(self):\n")),(0,a.kt)("p",null,"Establishes the WebSocket connection to the command server, and maintains it. If the connection drops, it tries to reconnect."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"async receive(self, ws):\n")),(0,a.kt)("p",null,"Receives messages from the WebSocket, processes and handles them. Controls the robot's movement and arm/claw/camera commands based on received messages."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ws: The WebSocket object to receive messages from.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"async send(self, ws):\n")),(0,a.kt)("p",null,"Sends data to the WebSocket server if the robot is in autonomous mode. The sent data includes the ultrasonic distance readings."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"ws: The WebSocket object to send messages to.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"robot_video_wspy"},"robot_video_ws.py"),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to manage the video stream for the robot using GStreamer."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"os")),(0,a.kt)("p",null,"Class:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"RobotVideoWS")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"run(self):\n")),(0,a.kt)("p",null,"Runs the GStreamer command to stream the video from the robot to a remote server."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"3-opencv"},"3. OpenCV"),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"startup"},"Startup"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"opencvpy"},(0,a.kt)("strong",{parentName:"h3"},"opencv.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to manage the video and command websockets for the robot using OpenCV."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"asyncio"),(0,a.kt)("li",{parentName:"ul"},"opencv_video: VideoWS"),(0,a.kt)("li",{parentName:"ul"},"opencv_commands: CommandWS"),(0,a.kt)("li",{parentName:"ul"},"Queue"),(0,a.kt)("li",{parentName:"ul"},"threading"),(0,a.kt)("li",{parentName:"ul"},"image_processing.process_images: process_img")),(0,a.kt)("p",null,"Async Functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"main():\n")),(0,a.kt)("p",null,"Sets up the necessary websockets and image processing threads for the robot."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Main Execution:"),(0,a.kt)("p",null,"If the script is run as the main program, it starts the main async function."),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"opencv_videopy"},(0,a.kt)("strong",{parentName:"h3"},"opencv_video.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to manage the video streaming for the robot using OpenCV."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"typing: List"),(0,a.kt)("li",{parentName:"ul"},"cv2"),(0,a.kt)("li",{parentName:"ul"},"base64"),(0,a.kt)("li",{parentName:"ul"},"Queue"),(0,a.kt)("li",{parentName:"ul"},"flask: Flask, Response"),(0,a.kt)("li",{parentName:"ul"},"threading")),(0,a.kt)("p",null,"Global Variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"original_lock"),": Lock for the original video stream thread."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"color_detection_lock"),": Lock for the color detection video stream thread.")),(0,a.kt)("p",null,"Functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"cv2_to_base64(img):\n")),(0,a.kt)("p",null,"Converts an OpenCV image to Base64 bytes for transmission."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"img: An OpenCV image.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Base64 bytes of the image.")),(0,a.kt)("p",null,"Class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"VideoWS:\n")),(0,a.kt)("p",null,"Attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PORT: Port number for the video websocket server."),(0,a.kt)("li",{parentName:"ul"},"HOST: IP address for the video websocket server."),(0,a.kt)("li",{parentName:"ul"},"dummy_img: Dummy image when there's no data to send."),(0,a.kt)("li",{parentName:"ul"},"vid: OpenCV VideoCapture object."),(0,a.kt)("li",{parentName:"ul"},"clients: Set of connected clients."),(0,a.kt)("li",{parentName:"ul"},"img_proc_q: Queue for image processing."),(0,a.kt)("li",{parentName:"ul"},"websocket_q: Queue for processed images from the websocket."),(0,a.kt)("li",{parentName:"ul"},"app: Flask app object."),(0,a.kt)("li",{parentName:"ul"},"autonomous: List containing a boolean value for autonomous mode status.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"start(self, img_proc_q, websocket_q, autonomous: List[bool]):\n")),(0,a.kt)("p",null,"Starts the video websocket server."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"img_proc_q: Queue for image processing."),(0,a.kt)("li",{parentName:"ul"},"websocket_q: Queue for processed images from the websocket."),(0,a.kt)("li",{parentName:"ul"},"autonomous: List containing a boolean value for autonomous mode status.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"original_stream(self):\n")),(0,a.kt)("p",null,"Creates a Flask response for the original video stream."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Flask Response object for the original video stream.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"color_detection_stream(self):\n")),(0,a.kt)("p",null,"Creates a Flask response for the color detection video stream."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Flask Response object for the color detection video stream.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"original(self):\n")),(0,a.kt)("p",null,"Main loop for displaying the original video stream."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Generator yielding the original video stream.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"color_detection(self):\n")),(0,a.kt)("p",null,"Main loop for displaying the color detection video stream."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Generator yielding the color detection video stream.")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"opencv_commandspy"},(0,a.kt)("strong",{parentName:"h3"},"opencv_commands.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to manage the command websocket server for the robot using OpenCV."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"json"),(0,a.kt)("li",{parentName:"ul"},"typing: List"),(0,a.kt)("li",{parentName:"ul"},"websockets"),(0,a.kt)("li",{parentName:"ul"},"asyncio"),(0,a.kt)("li",{parentName:"ul"},"queue: Queue"),(0,a.kt)("li",{parentName:"ul"},"copy")),(0,a.kt)("p",null,"Class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"CommandWS:\n")),(0,a.kt)("p",null,"Attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PORT: Port number for the command websocket server."),(0,a.kt)("li",{parentName:"ul"},"HOST: IP address for the command websocket server."),(0,a.kt)("li",{parentName:"ul"},"clients: Set of connected clients."),(0,a.kt)("li",{parentName:"ul"},"robot_ws: Websocket object for the robot."),(0,a.kt)("li",{parentName:"ul"},"command_q: Queue for commands."),(0,a.kt)("li",{parentName:"ul"},"autonomous: List containing a boolean value for autonomous mode status."),(0,a.kt)("li",{parentName:"ul"},"ultrasonic_data_q: Queue for ultrasonic data.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"start_server(self, command_q: Queue, autonomous: List[bool], ultrasonic_data_q: Queue):\n")),(0,a.kt)("p",null,"Starts the command websocket server."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"command_q: Queue for commands."),(0,a.kt)("li",{parentName:"ul"},"autonomous: List containing a boolean value for autonomous mode status."),(0,a.kt)("li",{parentName:"ul"},"ultrasonic_data_q: Queue for ultrasonic data.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"serve(self, websocket):\n")),(0,a.kt)("p",null,"Serves the websocket."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"websocket: Websocket object for the client.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"send(self, websocket):\n")),(0,a.kt)("p",null,"Sends data through the websocket."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"websocket: Websocket object for the client.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"receive(self, websocket):\n")),(0,a.kt)("p",null,"Receives data through the websocket."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"websocket: Websocket object for the client.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"color_tuningp"},(0,a.kt)("strong",{parentName:"h3"},"color_tuning.p")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to tune color detection for a robot using OpenCV."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"cv2"),(0,a.kt)("li",{parentName:"ul"},"numpy as np")),(0,a.kt)("p",null,"Functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"nothing(x):\n")),(0,a.kt)("p",null,"A dummy function that does nothing. Used as a callback for the trackbar."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"x: An argument passed by the trackbar.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"detect_colors():\n")),(0,a.kt)("p",null,"Detects colors in a video stream, allowing adjustment of the color range using trackbars."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"autonomypy"},(0,a.kt)("strong",{parentName:"h3"},"autonomy.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A module for autonomously controlling the robot."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"queue: Queue"),(0,a.kt)("li",{parentName:"ul"},"image_processing.color_detection: direction_to_center")),(0,a.kt)("p",null,"Class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"Automation:\n")),(0,a.kt)("p",null,"Attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"isCentered: Boolean value indicating if the robot is centered."),(0,a.kt)("li",{parentName:"ul"},"commands_q: Queue for commands."),(0,a.kt)("li",{parentName:"ul"},"ultrasonic_data: Data received from ultrasonic sensor.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"__init__(self, q: Queue) -> None:\n")),(0,a.kt)("p",null,"Initializes the Automation class."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"q: Queue for commands.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"process_ultrasonic_data(self, data):\n")),(0,a.kt)("p",null,"Processes the ultrasonic sensor data."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"data: Data received from the ultrasonic sensor.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"crop_image(self, image, h):\n")),(0,a.kt)("p",null,"Crops the image to the desired height."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"image: Image to be cropped."),(0,a.kt)("li",{parentName:"ul"},"h: Desired height to crop the image.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Cropped image.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"center_robot(self, direction) -> None:\n")),(0,a.kt)("p",null,"Centers the robot based on the image."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"direction: Direction in which the robot needs to be centered.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"direction_to_center(image) -> str:\n")),(0,a.kt)("p",null,"Determines the direction in which the robot needs to be centered based on the image."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"image: Image to be processed.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A string indicating the direction in which the robot needs to be centered ('left', 'right', 'center').")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"automationpy"},(0,a.kt)("strong",{parentName:"h3"},"automation.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A module for autonomously controlling the robot based on detecting boundary lines using OpenCV."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"opencv as cv2")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"within_Bounds(image)\n")),(0,a.kt)("p",null,"Checks if both boundary lines are within the camera view."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"image: Image captured by the camera.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A boolean value indicating whether both boundary lines are within the camera view.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"reached_End()\n")),(0,a.kt)("p",null,"Determines if the robot has reached the end of the track."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A boolean value indicating whether the robot has reached the end of the track.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"automated_Movement(image)\n")),(0,a.kt)("p",null,"Initiates the autonomous movement of the robot."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"image: Image captured by the camera.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"moveCamera()\n")),(0,a.kt)("p",null,"Moves the camera up or down to keep the boundary lines in view."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"turnLeft()\n")),(0,a.kt)("p",null,"Turns the robot left until both boundary lines are in view."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A boolean or integer value indicating the status of the left boundary line.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"turnRight()\n")),(0,a.kt)("p",null,"Turns the robot right until both boundary lines are in view."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A boolean or integer value indicating the status of the right boundary line.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"image-processing"},"Image Processing"),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"color_detectionpy"},(0,a.kt)("strong",{parentName:"h3"},"color_detection.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A module for detecting colors using OpenCV."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"typing: List"),(0,a.kt)("li",{parentName:"ul"},"cv2"),(0,a.kt)("li",{parentName:"ul"},"numpy as np")),(0,a.kt)("p",null,"Class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"Contour:\n")),(0,a.kt)("p",null,"Attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"area: Area of the contour."),(0,a.kt)("li",{parentName:"ul"},"contour: Contour object.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"__init__(self, area, contour)\n")),(0,a.kt)("p",null,"Initializes a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Contour")," object with the given area and contour."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"area: Area of the contour."),(0,a.kt)("li",{parentName:"ul"},"contour: Contour object.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"set_area(self, area)\n")),(0,a.kt)("p",null,"Sets the area of the contour."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"area: Area of the contour.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"set_contour(self, contour)\n")),(0,a.kt)("p",null,"Sets the contour object."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"contour: Contour object.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("p",null,"Variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"yellow_tape_lower: Lower bound of the yellow color range."),(0,a.kt)("li",{parentName:"ul"},"yellow_tape_upper: Upper bound of the yellow color range."),(0,a.kt)("li",{parentName:"ul"},"kernel: 5x5 numpy array.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"make_contours(mask, text, img)\n")),(0,a.kt)("p",null,"Makes the contours for the given mask and text on the image."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"mask: Mask for the contours."),(0,a.kt)("li",{parentName:"ul"},"text: Text to put on the image."),(0,a.kt)("li",{parentName:"ul"},"img: Image to put the contours on.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Image with the contours.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"direction_to_center(img)\n")),(0,a.kt)("p",null,"Determines which direction the robot should turn to center between the tape lines."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"img: Image captured by the camera.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"A string indicating the direction the robot should turn to center between the tape lines.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"detect_colors(img)\n")),(0,a.kt)("p",null,"Detects colors in the image."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"img: Image captured by the camera.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Image with the detected colors.")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"detect_painters_tapepy"},(0,a.kt)("strong",{parentName:"h3"},"detect_painters_tape.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to manage the command websocket server for the robot using OpenCV."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"json"),(0,a.kt)("li",{parentName:"ul"},"typing: List"),(0,a.kt)("li",{parentName:"ul"},"websockets"),(0,a.kt)("li",{parentName:"ul"},"asyncio"),(0,a.kt)("li",{parentName:"ul"},"queue: Queue"),(0,a.kt)("li",{parentName:"ul"},"copy")),(0,a.kt)("p",null,"Class:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"CommandWS:\n")),(0,a.kt)("p",null,"Attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"PORT: Port number for the command websocket server."),(0,a.kt)("li",{parentName:"ul"},"HOST: IP address for the command websocket server."),(0,a.kt)("li",{parentName:"ul"},"clients: Set of connected clients."),(0,a.kt)("li",{parentName:"ul"},"robot_ws: Websocket object for the robot."),(0,a.kt)("li",{parentName:"ul"},"command_q: Queue for commands."),(0,a.kt)("li",{parentName:"ul"},"autonomous: List containing a boolean value for autonomous mode status."),(0,a.kt)("li",{parentName:"ul"},"ultrasonic_data_q: Queue for ultrasonic data.")),(0,a.kt)("p",null,"Methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"start_server(self, command_q: Queue, autonomous: List[bool], ultrasonic_data_q: Queue):\n")),(0,a.kt)("p",null,"Starts the command websocket server."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"command_q: Queue for commands."),(0,a.kt)("li",{parentName:"ul"},"autonomous: List containing a boolean value for autonomous mode status."),(0,a.kt)("li",{parentName:"ul"},"ultrasonic_data_q: Queue for ultrasonic data.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"serve(self, websocket):\n")),(0,a.kt)("p",null,"Serves the websocket."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"websocket: Websocket object for the client.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"send(self, websocket):\n")),(0,a.kt)("p",null,"Sends data through the websocket."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"websocket: Websocket object for the client.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"receive(self, websocket):\n")),(0,a.kt)("p",null,"Receives data through the websocket."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"websocket: Websocket object for the client.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"detect_painters_tapepy-1"},(0,a.kt)("strong",{parentName:"h3"},"detect_painters_tape.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to detect painter's tape on a video stream."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"cv2"),(0,a.kt)("li",{parentName:"ul"},"numpy")),(0,a.kt)("p",null,"Global variables:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"vid: VideoCapture object for video stream."),(0,a.kt)("li",{parentName:"ul"},"painters_tape_lower: numpy array of lower HSV values for painters tape color."),(0,a.kt)("li",{parentName:"ul"},"painters_tape_upper: numpy array of upper HSV values for painters tape color."),(0,a.kt)("li",{parentName:"ul"},"kernel: numpy array for morphological operations.")),(0,a.kt)("p",null,"Functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"make_contours(mask, text, img):\n")),(0,a.kt)("p",null,"Draws contours around detected objects."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"mask: binary mask of detected objects."),(0,a.kt)("li",{parentName:"ul"},"text: text label for detected objects."),(0,a.kt)("li",{parentName:"ul"},"img: original image frame.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"img: original image frame with contours drawn.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"detect_colors():\n")),(0,a.kt)("p",null,"Detects painter's tape color in the video stream."),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"process_imagespy"},(0,a.kt)("strong",{parentName:"h3"},"process_images.py")),(0,a.kt)("hr",null),(0,a.kt)("p",null,"A script to process images from a video stream and send commands to the robot."),(0,a.kt)("p",null,"Imports:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"queue: Queue"),(0,a.kt)("li",{parentName:"ul"},"typing: List"),(0,a.kt)("li",{parentName:"ul"},"image_processing.color_detection: detect_colors, direction_to_center"),(0,a.kt)("li",{parentName:"ul"},"autonomy: Automation")),(0,a.kt)("p",null,"Functions:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"process_img(img_proc_q: Queue, websocket_q: Queue, command_q: Queue, autonomous: List[bool], ultrasonic_data_q: Queue):\n")),(0,a.kt)("p",null,"Processes images from a video stream and sends commands to the robot."),(0,a.kt)("p",null,"Arguments:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"img_proc_q: Queue for image processing."),(0,a.kt)("li",{parentName:"ul"},"websocket_q: Queue for sending images through the websocket."),(0,a.kt)("li",{parentName:"ul"},"command_q: Queue for sending commands to the robot."),(0,a.kt)("li",{parentName:"ul"},"autonomous: List containing a boolean value for autonomous mode status."),(0,a.kt)("li",{parentName:"ul"},"ultrasonic_data_q: Queue for ultrasonic data.")),(0,a.kt)("p",null,"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("hr",null))}k.isMDXComponent=!0}}]);